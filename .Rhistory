# force network gives us more options.
forceNetwork(Links = g_class_d3$links, Nodes = g_class_d3$nodes, Source = "source",
Target = "target", NodeID = "name", Group = "name", bounded = TRUE,
opacityNoHover = TRUE, opacity = .6)
# We can use graphjs function from threejs to make a bit more fun, interactive 3d plot.
# only way I could get the vertex labels to populate was to use the d3 object.
graphjs(g_class, vertex.label = g_class_d3$nodes$name, main='Network Science Class, Spring 2020',
vertex.color = 'blue', vertex.shape = 'sphere')
library(data.table)
library(dplyr)
setwd("~/Documents/projects/network_science_flights")
library(data.table)
library(dplyr)
library(magrittr)
library(igraph)
library(networkD3)
# initialize data frame
df <- data.table()
# loop through yearly files and append to overall dataframe
for (d in c("Air_Data_2018.csv", 'Air_Data_1998.csv')){
year <- as.numeric(gsub('[^[:digit:]]', '', d))
data <- fread(d)
data$V21 <- NULL
data$Year <- year
df <- rbind(df, data)
rm(data)
}
library(dplyr)
library(data.table)
library(dplyr)
library(magrittr)
library(igraph)
library(networkD3)
# initialize data frame
df <- data.table()
# loop through yearly files and append to overall dataframe
for (d in c("Air_Data_2018.csv", 'Air_Data_1998.csv')){
year <- as.numeric(gsub('[^[:digit:]]', '', d))
data <- fread(d)
data$V21 <- NULL
data$Year <- year
df <- rbind(df, data)
rm(data)
}
# define our grouping function
group_flights <- function(data, airline, cols, year){
a <- data[SEATS > 0 & UNIQUE_CARRIER %in% airline & Year == year,
.(flights = sum(DEPARTURES_PERFORMED), passengers = sum(PASSENGERS)),
cols]
a %<>% arrange(desc(flights))
a %<>% filter(ORIGIN != DEST)
return(setDT(a))
}
library(dplyr)
library(igraph)
get_null_df_and_metrics <-function(df) {
# select origin, dest, flights, make flights = to weight
air_df = df %>% select(ORIGIN, DEST) %>% rename(from = ORIGIN, to = DEST)
# select unweighted or weighted
#weighted_df <- (df %>% select(ORIGIN, DEST, flights) %>%
#                                    rename(from = ORIGIN, to = DEST, weight = flights))
#weighted_g <- graph.data.frame(weighted_df, directed = TRUE)
#g <- weighted_g
unweighted_g <- graph_from_edgelist(df %>% select(ORIGIN, DEST) %>% as.matrix())
g <- unweighted_g
# get metrics of observed network
observed_deg <- (degree(g, mode = "all"))
observed_betweenness <- (betweenness(g))
observed_mean_dist <- mean_distance(g)
observed_diameter <- diameter(g)
# get random network params
numb_edges <- length(E(g))
numb_vertices <-length(V(g))
numb_flights <- sum(df$flights) # attempt to make rand grapgh with edges == total weight
p_edges <- (numb_edges/(numb_vertices*(numb_vertices-1)))
# make random network
rand_g <- sample_gnp(n=numb_vertices, p=p_edges, directed=TRUE) %>%
set_vertex_attr("label", value = V(g))
V(rand_g)$name <- V(g)$name # name random network vertices same as original graphs
# get metrics from random network
rand_betweenness = (betweenness(rand_g))
rand_deg <- (degree(rand_g, mode='all'))
rand_mean_dist <- mean_distance(rand_g)
rand_diameter <- diameter(rand_g)
# make random g into a df
rand_df <- as_data_frame(rand_g)
names(rand_df) <- c('ORIGIN', 'DEST') # used for joining back to original coordinates
# get the lat and longs
original_origins <- select(df, c(ORIGIN, origin_lat, origin_lon))
original_dests <- select(df, c(DEST, dest_lat, dest_lon))
# combine random network nodes with lat/lons, dedupe
rand_df_coords <- merge(rand_df, original_origins, by='ORIGIN', all.x=T)
rand_df_coords <- merge(rand_df_coords, original_dests, by='DEST', all.x=T)
rand_df_coords_deduped <-  rand_df_coords[!duplicated(rand_df_coords), ]
# make a new df with all the stats for later use
metrics_df <- data.frame(observed_betweenness, observed_deg, observed_mean_dist, observed_diameter,
rand_betweenness, rand_deg, rand_mean_dist, rand_diameter,
numb_vertices, numb_edges, num_flights)
print(colMeans(metrics_df))
return(list('rand_df' =rand_df_coords_deduped, 'metrics_df' = metrics_df))
}
# Make graphics for delta
results <- get_null_df_and_metrics(DL_2018)
# read the lat/lon for each airport
origin <- fread('cont_us_nodes.csv')
names(origin) <- c("ORIGIN", 'origin_lat', 'origin_lon')
dest <- fread('cont_us_nodes.csv')
names(dest) <- c("DEST", 'dest_lat', 'dest_lon')
# define the grouping columns
cols <- c("ORIGIN", "ORIGIN_CITY_NAME", "DEST", "DEST_CITY_NAME", "UNIQUE_CARRIER")
# loop through our two years
for(yr in c(1998, 2018)){
# define variable name
var_df <- paste0('all_flights_', yr)
# create grouped data frame
assign(var_df, group_flights(df, unique(df$UNIQUE_CARRIER), cols, yr))
# join grouped data frame with lat/long for dest/origin
assign(var_df, get(var_df) %>% left_join(origin) %>% left_join(dest) %>% setDT())
# loop through carriers
for(al in c("AA", "DL", "UA", "WN")){
# create variable name
var_df <- paste0(al, '_', yr)
# create grouped data frame
assign(var_df, group_flights(df, al, cols, yr))
# join grouped data frame with lat/lon for dest/origin
assign(var_df, get(var_df) %>% left_join(origin) %>% left_join(dest) %>% setDT())
}
}
rm(origin, dest)
# write all files to working directory
for (file in ls(pattern = "*8")){
fwrite(get(file), paste0(file, '.csv'))
}
library(ggplot2)
# Make graphics for delta
results <- get_null_df_and_metrics(DL_2018)
get_null_df_and_metrics <-function(df) {
# select origin, dest, flights, make flights = to weight
air_df = df %>% select(ORIGIN, DEST) %>% rename(from = ORIGIN, to = DEST)
# select unweighted or weighted
#weighted_df <- (df %>% select(ORIGIN, DEST, flights) %>%
#                                    rename(from = ORIGIN, to = DEST, weight = flights))
#weighted_g <- graph.data.frame(weighted_df, directed = TRUE)
#g <- weighted_g
unweighted_g <- graph_from_edgelist(df %>% select(ORIGIN, DEST) %>% as.matrix())
g <- unweighted_g
# get metrics of observed network
observed_deg <- (degree(g, mode = "all"))
observed_betweenness <- (betweenness(g))
observed_mean_dist <- mean_distance(g)
observed_diameter <- diameter(g)
# get random network params
numb_edges <- length(E(g))
numb_vertices <-length(V(g))
numb_flights <- sum(df$flights) # attempt to make rand grapgh with edges == total weight
p_edges <- (numb_edges/(numb_vertices*(numb_vertices-1)))
# make random network
rand_g <- sample_gnp(n=numb_vertices, p=p_edges, directed=TRUE) %>%
set_vertex_attr("label", value = V(g))
V(rand_g)$name <- V(g)$name # name random network vertices same as original graphs
# get metrics from random network
rand_betweenness = (betweenness(rand_g))
rand_deg <- (degree(rand_g, mode='all'))
rand_mean_dist <- mean_distance(rand_g)
rand_diameter <- diameter(rand_g)
# make random g into a df
rand_df <- as_data_frame(rand_g)
names(rand_df) <- c('ORIGIN', 'DEST') # used for joining back to original coordinates
# get the lat and longs
original_origins <- select(df, c(ORIGIN, origin_lat, origin_lon))
original_dests <- select(df, c(DEST, dest_lat, dest_lon))
# combine random network nodes with lat/lons, dedupe
rand_df_coords <- merge(rand_df, original_origins, by='ORIGIN', all.x=T)
rand_df_coords <- merge(rand_df_coords, original_dests, by='DEST', all.x=T)
rand_df_coords_deduped <-  rand_df_coords[!duplicated(rand_df_coords), ]
# make a new df with all the stats for later use
metrics_df <- data.frame(observed_betweenness, observed_deg, observed_mean_dist, observed_diameter,
rand_betweenness, rand_deg, rand_mean_dist, rand_diameter,
numb_vertices, numb_edges, numb_flights)
print(colMeans(metrics_df))
return(list('rand_df' =rand_df_coords_deduped, 'metrics_df' = metrics_df))
}
# Make graphics for delta
results <- get_null_df_and_metrics(DL_2018)
dl_2018_rand_df <- results$rand_df
dl_2018_metrics <- results$metrics_df
View(dl_2018_metrics)
#Unweighted metrics for presentation
results <- get_null_df_and_metrics(all_flights_1998)
all_2018_rand_Df <- results$rand_df
all_2018_metrics <- results$metrics_df
View(all_2018_metrics)
all_1998_rand_Df <- results$rand_df
all_1998_metrics <- results$metrics_df
all_1998_summary <- colMeans(all_1998_metrics)
all_1998_summary <- data.frame(colMeans(all_1998_metrics))
View(all_1998_summary)
options(scipen=999)
all_1998_summary <- data.frame(colMeans(all_1998_metrics))
View(all_1998_summary)
results <- get_null_df_and_metrics(all_flights_2018)
all_2018_rand_Df <- results$rand_df
all_2018_metrics <- results$metrics_df
all_2018_summary <- data.frame(colMeans(all_2018_metrics))
View(all_2018_metrics)
View(all_flights_2018)
View(all_2018_summary)
write.csv(all_2018_metrics, 'all_2018_metrics.csv')
sum(all_flights_2018$flights)
sum(all_flights_1998$flights)
View(all_flights_2018)
View(all_flights_1998)
View(all_flights_2018)
#write.csv(all_2018_metrics, 'all_2018_metrics.csv')
sum(all_flights_1998$passengers)
#write.csv(all_2018_metrics, 'all_2018_metrics.csv')
sum(all_flights_2018$passengers)
#write.csv(all_2018_metrics, 'all_2018_metrics.csv')
sum(all_flights_2018$flights)
View(all_flights_1998)
#write.csv(all_2018_metrics, 'all_2018_metrics.csv')
sum(all_flights_1998$flights)
str(all_flights_1998)
summary(all_flights_1998)
return(metrics_df)
get_weighted_metrics
get_weighted_metrics <-function(df) {
# select origin, dest, flights, make flights = to weight
air_df = df %>% select(ORIGIN, DEST) %>% rename(from = ORIGIN, to = DEST)
weighted_df <- (df %>% select(ORIGIN, DEST, flights) %>%
rename(from = ORIGIN, to = DEST, weight = flights))
weighted_g <- graph.data.frame(weighted_df, directed = TRUE)
g <- weighted_g
# get metrics of observed network
observed_deg <- (degree(g, mode = "all"))
observed_betweenness <- (betweenness(g))
observed_mean_dist <- mean_distance(g)
observed_diameter <- diameter(g)
# get random network params
numb_edges <- length(E(g))
numb_vertices <-length(V(g))
numb_flights <- sum(df$flights) # attempt to make rand grapgh with edges == total weight
# make a new df with all the stats for later use
metrics_df <- data.frame(observed_betweenness, observed_deg, observed_mean_dist, observed_diameter,
rand_betweenness, rand_deg, rand_mean_dist, rand_diameter,
numb_vertices, numb_edges, numb_flights)
print(colMeans(metrics_df))
return(metrics_df)
}
all_1998_weighted_metrics <- get_weighted_metrics(all_flights_1998)
View(all_flights_1998)
# select origin, dest, flights, make flights = to weight
air_df = df %>% select(ORIGIN, DEST) %>% rename(from = ORIGIN, to = DEST) %>% select(flights>0)
View(all_flights_1998)
get_weighted_metrics <-function(df) {
# select origin, dest, flights, make flights = to weight
air_df = df %>% select(ORIGIN, DEST) %>% rename(from = ORIGIN, to = DEST) %>% select(flights>0)
weighted_df <- (df %>% select(ORIGIN, DEST, flights) %>%
rename(from = ORIGIN, to = DEST, weight = flights))
weighted_g <- graph.data.frame(weighted_df, directed = TRUE)
g <- weighted_g
# get metrics of observed network
observed_deg <- (degree(g, mode = "all"))
observed_betweenness <- (betweenness(g))
observed_mean_dist <- mean_distance(g)
observed_diameter <- diameter(g)
# get random network params
numb_edges <- length(E(g))
numb_vertices <-length(V(g))
numb_flights <- sum(df$flights) # attempt to make rand grapgh with edges == total weight
# make a new df with all the stats for later use
metrics_df <- data.frame(observed_betweenness, observed_deg, observed_mean_dist, observed_diameter,
rand_betweenness, rand_deg, rand_mean_dist, rand_diameter,
numb_vertices, numb_edges, numb_flights)
print(colMeans(metrics_df))
return(metrics_df)
}
all_1998_weighted_metrics <- get_weighted_metrics(all_flights_1998)
# select origin, dest, flights, make flights = to weight
air_df = df %>% select(ORIGIN, DEST) %>% rename(from = ORIGIN, to = DEST) %>% filter(flights>0)
get_weighted_metrics <-function(df) {
# select origin, dest, flights, make flights = to weight
air_df = df %>% select(ORIGIN, DEST) %>% rename(from = ORIGIN, to = DEST) %>% filter(flights>0)
weighted_df <- (df %>% select(ORIGIN, DEST, flights) %>%
rename(from = ORIGIN, to = DEST, weight = flights))
weighted_g <- graph.data.frame(weighted_df, directed = TRUE)
g <- weighted_g
# get metrics of observed network
observed_deg <- (degree(g, mode = "all"))
observed_betweenness <- (betweenness(g))
observed_mean_dist <- mean_distance(g)
observed_diameter <- diameter(g)
# get random network params
numb_edges <- length(E(g))
numb_vertices <-length(V(g))
numb_flights <- sum(df$flights) # attempt to make rand grapgh with edges == total weight
# make a new df with all the stats for later use
metrics_df <- data.frame(observed_betweenness, observed_deg, observed_mean_dist, observed_diameter,
rand_betweenness, rand_deg, rand_mean_dist, rand_diameter,
numb_vertices, numb_edges, numb_flights)
print(colMeans(metrics_df))
return(metrics_df)
}
all_1998_weighted_metrics <- get_weighted_metrics(all_flights_1998)
View(all_flights_1998)
all_flights_1998 %>% filter(filghts>0)
# select origin, dest, flights, make flights = to weight
air_df = df %>% select(ORIGIN, DEST) %>% rename(from = ORIGIN, to = DEST) %>% filter(df$flights > 0)
get_weighted_metrics <-function(df) {
# select origin, dest, flights, make flights = to weight
air_df = df %>% select(ORIGIN, DEST) %>% rename(from = ORIGIN, to = DEST) %>% filter(df$flights > 0)
weighted_df <- (df %>% select(ORIGIN, DEST, flights) %>%
rename(from = ORIGIN, to = DEST, weight = flights))
weighted_g <- graph.data.frame(weighted_df, directed = TRUE)
g <- weighted_g
# get metrics of observed network
observed_deg <- (degree(g, mode = "all"))
observed_betweenness <- (betweenness(g))
observed_mean_dist <- mean_distance(g)
observed_diameter <- diameter(g)
# get random network params
numb_edges <- length(E(g))
numb_vertices <-length(V(g))
numb_flights <- sum(df$flights) # attempt to make rand grapgh with edges == total weight
# make a new df with all the stats for later use
metrics_df <- data.frame(observed_betweenness, observed_deg, observed_mean_dist, observed_diameter,
rand_betweenness, rand_deg, rand_mean_dist, rand_diameter,
numb_vertices, numb_edges, numb_flights)
print(colMeans(metrics_df))
return(metrics_df)
}
all_1998_weighted_metrics <- get_weighted_metrics(all_flights_1998)
test <- all_flights_1998 %>% filter(filghts>0)
test <- all_flights_1998 %>% filter(all_flights_1998$filghts>0)
# select origin, dest, flights, make flights = to weight
air_df = df %>% select(ORIGIN, DEST) %>% rename(from = ORIGIN, to = DEST) %>% filter(df$flights == 0)
test <- all_flights_1998 %>% filter(all_flights_1998$filghts>0)
test <- all_flights_1998 %>% filter(flights>0)
View(test)
get_weighted_metrics <-function(df) {
# select origin, dest, flights, make flights = to weight
air_df = df %>% select(ORIGIN, DEST) %>% rename(from = ORIGIN, to = DEST) %>% (filter(flights>0))
weighted_df <- (df %>% select(ORIGIN, DEST, flights) %>%
rename(from = ORIGIN, to = DEST, weight = flights))
weighted_g <- graph.data.frame(weighted_df, directed = TRUE)
g <- weighted_g
# get metrics of observed network
observed_deg <- (degree(g, mode = "all"))
observed_betweenness <- (betweenness(g))
observed_mean_dist <- mean_distance(g)
observed_diameter <- diameter(g)
# get random network params
numb_edges <- length(E(g))
numb_vertices <-length(V(g))
numb_flights <- sum(df$flights) # attempt to make rand grapgh with edges == total weight
# make a new df with all the stats for later use
metrics_df <- data.frame(observed_betweenness, observed_deg, observed_mean_dist, observed_diameter,
rand_betweenness, rand_deg, rand_mean_dist, rand_diameter,
numb_vertices, numb_edges, numb_flights)
print(colMeans(metrics_df))
return(metrics_df)
}
all_1998_weighted_metrics <- get_weighted_metrics(all_flights_1998)
all_1998_weighted_summary <- data.frame(colMeans(all_1998_metrics))
all_flights_1998 <- all_flights_1998 %>% filter(flights>0)
get_weighted_metrics <-function(df) {
# select origin, dest, flights, make flights = to weight
air_df = df %>% select(ORIGIN, DEST) %>% rename(from = ORIGIN, to = DEST)
weighted_df <- (df %>% select(ORIGIN, DEST, flights) %>%
rename(from = ORIGIN, to = DEST, weight = flights))
weighted_g <- graph.data.frame(weighted_df, directed = TRUE)
g <- weighted_g
# get metrics of observed network
observed_deg <- (degree(g, mode = "all"))
observed_betweenness <- (betweenness(g))
observed_mean_dist <- mean_distance(g)
observed_diameter <- diameter(g)
# get random network params
numb_edges <- length(E(g))
numb_vertices <-length(V(g))
numb_flights <- sum(df$flights) # attempt to make rand grapgh with edges == total weight
# make a new df with all the stats for later use
metrics_df <- data.frame(observed_betweenness, observed_deg, observed_mean_dist, observed_diameter,
rand_betweenness, rand_deg, rand_mean_dist, rand_diameter,
numb_vertices, numb_edges, numb_flights)
print(colMeans(metrics_df))
return(metrics_df)
}
all_1998_weighted_metrics <- get_weighted_metrics(all_flights_1998)
get_weighted_metrics <-function(df) {
# select origin, dest, flights, make flights = to weight
air_df = df %>% select(ORIGIN, DEST) %>% rename(from = ORIGIN, to = DEST)
weighted_df <- (df %>% select(ORIGIN, DEST, flights) %>%
rename(from = ORIGIN, to = DEST, weight = flights))
weighted_g <- graph.data.frame(weighted_df, directed = TRUE)
g <- weighted_g
# get metrics of observed network
observed_deg <- (degree(g, mode = "all"))
observed_betweenness <- (betweenness(g))
observed_mean_dist <- mean_distance(g)
observed_diameter <- diameter(g)
# get random network params
numb_edges <- length(E(g))
numb_vertices <-length(V(g))
numb_flights <- sum(df$flights) # attempt to make rand grapgh with edges == total weight
# make a new df with all the stats for later use
metrics_df <- data.frame(observed_betweenness, observed_deg, observed_mean_dist, observed_diameter,
numb_vertices, numb_edges, numb_flights)
print(colMeans(metrics_df))
return(metrics_df)
}
all_1998_weighted_metrics <- get_weighted_metrics(all_flights_1998)
all_flights_2018 <- all_flights_2018 %>% filter(flights>0)
get_weighted_metrics <-function(df) {
# select origin, dest, flights, make flights = to weight
air_df = df %>% select(ORIGIN, DEST) %>% rename(from = ORIGIN, to = DEST)
weighted_df <- (df %>% select(ORIGIN, DEST, flights) %>%
rename(from = ORIGIN, to = DEST, weight = flights))
weighted_g <- graph.data.frame(weighted_df, directed = TRUE)
g <- weighted_g
# get metrics of observed network
observed_deg <- (degree(g, mode = "all"))
observed_betweenness <- (betweenness(g))
observed_mean_dist <- mean_distance(g)
observed_diameter <- diameter(g)
# get random network params
numb_edges <- length(E(g))
numb_vertices <-length(V(g))
numb_flights <- sum(df$flights) # attempt to make rand grapgh with edges == total weight
# make a new df with all the stats for later use
metrics_df <- data.frame(observed_betweenness, observed_deg, observed_mean_dist, observed_diameter,
numb_vertices, numb_edges, numb_flights)
print(colMeans(metrics_df))
return(metrics_df)
}
all_1998_weighted_metrics <- get_weighted_metrics(all_flights_1998)
all_2018_weighted_metrics <- get_weighted_metrics(all_flights_2018)
all_2018_weighted_summary <- data.frame(colMeans(all_2018_metrics))
print(is_weighted(g))
get_weighted_metrics <-function(df) {
# select origin, dest, flights, make flights = to weight
air_df = df %>% select(ORIGIN, DEST) %>% rename(from = ORIGIN, to = DEST)
weighted_df <- (df %>% select(ORIGIN, DEST, flights) %>%
rename(from = ORIGIN, to = DEST, weight = flights))
weighted_g <- graph.data.frame(weighted_df, directed = TRUE)
g <- weighted_g
print(is_weighted(g))
# get metrics of observed network
observed_deg <- (degree(g, mode = "all"))
observed_betweenness <- (betweenness(g))
observed_mean_dist <- mean_distance(g)
observed_diameter <- diameter(g)
# get random network params
numb_edges <- length(E(g))
numb_vertices <-length(V(g))
numb_flights <- sum(df$flights) # attempt to make rand grapgh with edges == total weight
# make a new df with all the stats for later use
metrics_df <- data.frame(observed_betweenness, observed_deg, observed_mean_dist, observed_diameter,
numb_vertices, numb_edges, numb_flights)
print(colMeans(metrics_df))
return(metrics_df)
}
all_2018_weighted_metrics <- get_weighted_metrics(all_flights_2018)
get_null_df_and_metrics <-function(df) {
# select origin, dest, flights, make flights = to weight
air_df = df %>% select(ORIGIN, DEST) %>% rename(from = ORIGIN, to = DEST)
# select unweighted or weighted
#weighted_df <- (df %>% select(ORIGIN, DEST, flights) %>%
#                                    rename(from = ORIGIN, to = DEST, weight = flights))
#weighted_g <- graph.data.frame(weighted_df, directed = TRUE)
#g <- weighted_g
unweighted_g <- graph_from_edgelist(df %>% select(ORIGIN, DEST) %>% as.matrix())
g <- unweighted_g
print(is_weighted(g))
# get metrics of observed network
observed_deg <- (degree(g, mode = "all"))
observed_betweenness <- (betweenness(g))
observed_mean_dist <- mean_distance(g)
observed_diameter <- diameter(g)
# get random network params
numb_edges <- length(E(g))
numb_vertices <-length(V(g))
numb_flights <- sum(df$flights) # attempt to make rand grapgh with edges == total weight
p_edges <- (numb_edges/(numb_vertices*(numb_vertices-1)))
# make random network
rand_g <- sample_gnp(n=numb_vertices, p=p_edges, directed=TRUE) %>%
set_vertex_attr("label", value = V(g))
V(rand_g)$name <- V(g)$name # name random network vertices same as original graphs
# get metrics from random network
rand_betweenness = (betweenness(rand_g))
rand_deg <- (degree(rand_g, mode='all'))
rand_mean_dist <- mean_distance(rand_g)
rand_diameter <- diameter(rand_g)
# make random g into a df
rand_df <- as_data_frame(rand_g)
names(rand_df) <- c('ORIGIN', 'DEST') # used for joining back to original coordinates
# get the lat and longs
original_origins <- select(df, c(ORIGIN, origin_lat, origin_lon))
original_dests <- select(df, c(DEST, dest_lat, dest_lon))
# combine random network nodes with lat/lons, dedupe
rand_df_coords <- merge(rand_df, original_origins, by='ORIGIN', all.x=T)
rand_df_coords <- merge(rand_df_coords, original_dests, by='DEST', all.x=T)
rand_df_coords_deduped <-  rand_df_coords[!duplicated(rand_df_coords), ]
# make a new df with all the stats for later use
metrics_df <- data.frame(observed_betweenness, observed_deg, observed_mean_dist, observed_diameter,
rand_betweenness, rand_deg, rand_mean_dist, rand_diameter,
numb_vertices, numb_edges, numb_flights)
print(colMeans(metrics_df))
return(list('rand_df' =rand_df_coords_deduped, 'metrics_df' = metrics_df))
}
#Unweighted metrics for presentation
results <- get_null_df_and_metrics(all_flights_1998)
