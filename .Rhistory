for(yr in c(1998, 2018)){
# define variable name
var_df <- paste0('all_flights_', yr)
# create grouped data frame
assign(var_df, group_flights(df, unique(df$UNIQUE_CARRIER), cols, yr))
# join grouped data frame with lat/long for dest/origin
assign(var_df, get(var_df) %>% left_join(origin) %>% left_join(dest) %>% setDT())
# loop through carriers
for(al in c("AA", "DL", "UA", "WN")){
# create variable name
var_df <- paste0(al, '_', yr)
# create grouped data frame
assign(var_df, group_flights(df, al, cols, yr))
# join grouped data frame with lat/lon for dest/origin
assign(var_df, get(var_df) %>% left_join(origin) %>% left_join(dest) %>% setDT())
}
}
rm(origin, dest)
# write all files to working directory
for (file in ls(pattern = "*8")){
fwrite(get(file), paste0(file, '.csv'))
}
library(ggplot2)
library(maps)
library(ggmap)
plot_network = function (df_map, point_color = 'blue', line_color = point_color,
map_title = 'Top Routes', background_fill = 'grey',
map_state_lines = 'black', map_fill = 'black' )
{
df_map <- subset(df_map, ORIGIN!=DEST)
df_map <- na.omit(df_map)
df_map <-subset(df_map, origin_lat!=dest_lat)
# scaling function.  Could use some work.
range01 <- function(x){(x+1-min(x))/(max(x)-min(x))}
#range01 <- function(x){(log(x)-min(log(x)))/(max(log(x))-min(log(x)))}
# need to plot state lines
states_map <- map_data("state")
# Make a color pallate between two colors.  Grey is default first color.
col.1 <- adjustcolor('grey', alpha=0.4)
col.2 <- adjustcolor(line_color, alpha=.8)
edge.pal <- colorRampPalette(c(col.1, col.2), alpha = TRUE)
edge.col <- edge.pal(10)
# add a column for color indexing scaled by number of flights on each leg.
# make sure any 0 are set to minimum of 1, because R starts at 1.  Argh.
df_map$color_ind <- round(range01(df_map$flights)*10)
df_map$color_ind[df_map$color_ind==0] <- 1
# add and scale total number of flights
df_map$total_flts_scaled <- range01(df_map$flights)
# find counts of flights leaving by iata code, add to df_map as airport counts
airport_counts_df <- as.data.frame(df_map %>% group_by(ORIGIN) %>%
summarise(counts = n()))
df_map <- merge(df_map, airport_counts_df, by='ORIGIN')
# scale and add back to df
df_map$airpot_counts_scaled <- range01(df_map$counts)
# actual plotting
gg <- ggplot()
gg <- gg + geom_map(data=states_map, map=states_map, aes(map_id=region),
color=map_state_lines, fill=map_fill, size=0.25) +
expand_limits(x=states_map$long, y=states_map$lat)
gg <- gg + labs(x=NULL, y=NULL, title=map_title) +
theme_void() + # Empty theme without axis lines and texts
theme(panel.background = element_rect(fill=background_fill, colour=background_fill),
plot.background = element_rect(fill=background_fill, color=background_fill))
#coord_map("albers", lat0=39, lat1=49) +
#coord_map("albers", lat0=39, lat1=49) +
gg <- gg +
# The geom points are plotted scaled 0 to 1.  The factor can be adjusted
geom_point(data=df_map, aes(x=origin_lon, y=origin_lat),
#col=point_color,
shape = 21, colour = "black", fill = point_color,
size=(df_map$airpot_counts_scaled)*4) +
geom_curve(data = df_map,
aes(x=origin_lon, y=origin_lat, xend=dest_lon, yend=dest_lat),
# color is selected by index from the predefined color pallete above
# needs to be rounded to an int between 1 and 10
col = edge.col[df_map$color_ind],
# size is scaled 0 to 1
size = (df_map$total_flts_scaled),
curvature = 0.3, angle = 90, ncp = 5)
gg
}
for(yr in c(1998, 2018)){
for(al in c("AA", "DL", "UA", "WN")){
# create variable name
var_df <- paste0(al, '_', yr)
print(var_df)
plot_title <- paste0('Plot of ', al, ' in ', yr)
}}
plot_network(df_map=DL_1998, map_title="Delta in 1998", point_color='blue')
plot_network(df_map=DL_2018, map_title='Delta in 2018', point_color='blue')
plot_network(df_map=AA_1998, map_title="American in 1998", point_color='red')
plot_network(df_map=AA_2018, map_title='American in 2018', point_color='red')
plot_network(df_map=WN_1998, map_title="Southwest in 1998", point_color='orange')
plot_network(df_map=WN_2018, map_title='Southwest in 2018', point_color='orange')
plot_network(df_map=UA_1998, map_title="United in 1998", point_color='gold3')
plot_network(df_map=UA_2018, map_title='United in 2018', point_color='gold3')
View(united_2018)
View(df)
setwd("~/Documents/projects/network_science_flights")
# read in pipeline data
all_flights_2018 = read.csv('all_flights_2018.csv')
# select origin, dest, flights, make flights = to weight
test = all_flights_2018 %>% select(ORIGIN, DEST, flights) %>% rename(from = ORIGIN, to = DEST, weight = flights)
head(test)
# make into igraph object
test_graph_wgt <- graph.data.frame(test, directed = TRUE)
# check that it is weighted
is_weighted(test_graph_wgt)
print(V(test_graph_wgt))
print(degree(test_graph_wgt))
plot(degree(test_graph_wgt))
print(diameter(test_graph_wgt))
g <- graph_from_edgelist(dataframe %>% select(ORIGIN, DEST) %>% as.matrix())
g <- graph_from_edgelist(dataframe %>% select(ORIGIN, DEST) %>% as.matrix())
diameter(g)
farthest_vertices(g)
farthest_vertices(test_graph_wgt)
farthest_vertices(g)
farthest_vertices(g)
farthest_vertices(test_graph_wgt)
all_shortest_paths(g)
all_shortest_paths(g, from='TBN')
distances(g, v=V(g), to=V(g))
dist_mat <- distances(g, v=V(g), to=V(g))
View(dist_mat)
dit_mat.write_csv(dist_mat, 'dist_mat.csv')
write_csv(dist_mat, 'dist_mat.csv')
write_csv(dist_mat, 'dist_mat.csv')
write.csv(dist_mat, 'dist_mat.csv')
dist_mat <- distances(test_graph_wgt, v=V(test_graph_wgt), to=V(test_graph_wgt))
write.csv(dist_mat, 'dist_mat_weighted.csv')
betweenness(test_graph_wgt)
test_graph_wgt[1604]
View(test)
test <- filter(test, weight>0)
# select origin, dest, flights, make flights = to weight
test = all_flights_2018 %>% select(ORIGIN, DEST, flights) %>% rename(from = ORIGIN, to = DEST, weight = flights)
head(test)
test <- filter(test, weight>0)
betweenness(test_graph_wgt)
View(test)
test <- filter(test, weight>1)
betweenness(test_graph_wgt)
E(test)
E(test_graph_wgt)
betweenness(test_graph_wgt)
betweenness(test_graph_wgt, weights=NULL)
betweenness(test_graph_wgt, weights=0)
betweenness(test_graph_wgt, weights=1)
betweenness(g)
betweenness(test_graph_wgt)
#BETWEENESS
# vertex betweness
Betweenness = mean(betweenness(g))
Betweenness
edge_betweenness(g)
edge_betweenness(test_graph_wgt)
edge_betweenness(test_graph_wgt, weights = weight)
# select origin, dest, flights, make flights = to weight
test = all_flights_2018 %>% select(ORIGIN, DEST, flights) %>% rename(from = ORIGIN, to = DEST, weight = flights)
head(test)
# make into igraph object
test_graph_wgt <- graph.data.frame(test, directed = TRUE)
edge_betweenness(test_graph_wgt, weights = weight)
edge_betweenness(test_graph_wgt)
edge_between <- edge_betweenness(g)
edge_betweenness(g)
edge_betweenness(test_graph_wgt)
edge_betweenness(g)
test <- filter(test, weight>0)
edge_betweenness(test_graph_wgt)
test <- filter(test, weight>1)
edge_betweenness(test_graph_wgt)
test <- filter(test, weight>0)
head(test)
# select origin, dest, flights, make flights = to weight
test = all_flights_2018 %>% select(ORIGIN, DEST, flights) %>% rename(from = ORIGIN, to = DEST, weight = flights)
head(test)
# make into igraph object
test_graph_wgt <- graph.data.frame(test, directed = TRUE)
edge_betweenness(test_graph_wgt)
plot(degree(test_graph_wgt))
print(diameter(test_graph_wgt))
E(test_graph_wgt)
test <- filter(test, weight>0)
# select origin, dest, flights, make flights = to weight
test = all_flights_2018 %>% select(ORIGIN, DEST, flights) %>% rename(from = ORIGIN, to = DEST, weight = flights)
# make into igraph object
test_graph_wgt <- graph.data.frame(test, directed = TRUE)
# check that it is weighted
is_weighted(test_graph_wgt)
edge_betweenness(test_graph_wgt)
a
E(test_graph_wgt)
print(diameter(test_graph_wgt))
# select origin, dest, flights, make flights = to weight
test = all_flights_2018 %>% select(ORIGIN, DEST, flights) %>% rename(from = ORIGIN, to = DEST, weight = flights)
test <- filter(test, weight>0)
test <- filter(test, weight>1)
# make into igraph object
test_graph_wgt <- graph.data.frame(test, directed = TRUE)
E(test_graph_wgt)
edge_betweenness(test_graph_wgt)
betweenness(test_graph_wgt)
betweenness(test_graph_wgt)
mean(betweenness(test_graph_wgt))
test <- filter(test, weight>0)
# make into igraph object
test_graph_wgt <- graph.data.frame(test, directed = TRUE)
mean(betweenness(test_graph_wgt))
# select origin, dest, flights, make flights = to weight
test = all_flights_2018 %>% select(ORIGIN, DEST, flights) %>% rename(from = ORIGIN, to = DEST, weight = flights)
test <- filter(test, weight>0)
# make into igraph object
test_graph_wgt <- graph.data.frame(test, directed = TRUE)
mean(betweenness(test_graph_wgt))
# select origin, dest, flights, make flights = to weight
test = all_flights_2018 %>% select(ORIGIN, DEST, flights) %>% rename(from = ORIGIN, to = DEST, weight = flights)
head(test)
test <- filter(test, weight>0)
mean(betweenness(test_graph_wgt))
(betweenness(test_graph_wgt))
# select origin, dest, flights, make flights = to weight
test = all_flights_2018 %>% select(ORIGIN, DEST, flights) %>% rename(from = ORIGIN, to = DEST, weight = flights)
(betweenness(test_graph_wgt))
plot(betweenness(test_graph_wgt))
edge_betweenness(test_graph_wgt
edge_betweenness(test_graph_wgt)
edge_betweenness(test_graph_wgt)
test <- filter(test, weight>0)
# select origin, dest, flights, make flights = to weight
test = all_flights_2018 %>% select(ORIGIN, DEST, flights) %>% rename(from = ORIGIN, to = DEST, weight = flights)
test <- filter(test, weight>0)
# make into igraph object
test_graph_wgt <- graph.data.frame(test, directed = TRUE)
plot(betweenness(test_graph_wgt))
edge_betweenness(test_graph_wgt)
plot(edge_betweenness(test_graph_wgt))
# select origin, dest, flights, make flights = to weight
test = all_flights_2018 %>% select(ORIGIN, DEST, flights) %>% rename(from = ORIGIN, to = DEST, weight = flights)
# make into igraph object
test_graph_wgt <- graph.data.frame(test, directed = TRUE)
plot(betweenness(test_graph_wgt))
plot(edge_betweenness(test_graph_wgt))
plot(betweenness(test_graph_wgt))
# select origin, dest, flights, make flights = to weight
test = all_flights_2018 %>% select(ORIGIN, DEST, flights) %>% rename(from = ORIGIN, to = DEST, weight = flights)
test <- filter(test, weight>0)
# make into igraph object
test_graph_wgt <- graph.data.frame(test, directed = TRUE)
plot(betweenness(test_graph_wgt))
mean(betweenness(test_graph_wgt))
plot(edge_betweenness(test_graph_wgt))
mean(edge_betweenness(test_graph_wgt))
plot(vertex_betweenness(test_graph_wgt))
plot(betweenness(test_graph_wgt))
mean(betweenness(test_graph_wgt))
mean(betweenness(g))
library(data.table)
library(dplyr)
library(magrittr)
library(igraph)
library(networkD3)
# initialize data frame
df <- data.table()
# loop through yearly files and append to overall dataframe
for (d in c("Air_Data_2018.csv", 'Air_Data_1998.csv')){
year <- as.numeric(gsub('[^[:digit:]]', '', d))
data <- fread(d)
data$V21 <- NULL
data$Year <- year
df <- rbind(df, data)
rm(data)
}
# define our grouping function
group_flights <- function(data, airline, cols, year){
a <- data[SEATS > 0 & UNIQUE_CARRIER %in% airline & Year == year,
.(flights = sum(DEPARTURES_PERFORMED), passengers = sum(PASSENGERS)),
cols]
a %<>% arrange(desc(flights))
a %<>% filter(ORIGIN != DEST)
return(setDT(a))
}
# read the lat/lon for each airport
origin <- fread('cont_us_nodes.csv')
names(origin) <- c("ORIGIN", 'origin_lat', 'origin_lon')
dest <- fread('cont_us_nodes.csv')
names(dest) <- c("DEST", 'dest_lat', 'dest_lon')
# define the grouping columns
cols <- c("ORIGIN", "ORIGIN_CITY_NAME", "DEST", "DEST_CITY_NAME", "UNIQUE_CARRIER")
# loop through our two years
for(yr in c(1998, 2018)){
# define variable name
var_df <- paste0('all_flights_', yr)
# create grouped data frame
assign(var_df, group_flights(df, unique(df$UNIQUE_CARRIER), cols, yr))
# join grouped data frame with lat/long for dest/origin
assign(var_df, get(var_df) %>% left_join(origin) %>% left_join(dest) %>% setDT())
# loop through carriers
for(al in c("AA", "DL", "UA", "WN")){
# create variable name
var_df <- paste0(al, '_', yr)
# create grouped data frame
assign(var_df, group_flights(df, al, cols, yr))
# join grouped data frame with lat/lon for dest/origin
assign(var_df, get(var_df) %>% left_join(origin) %>% left_join(dest) %>% setDT())
}
}
rm(origin, dest)
# write all files to working directory
for (file in ls(pattern = "*8")){
fwrite(get(file), paste0(file, '.csv'))
}
library(ggplot2)
library(maps)
library(ggmap)
plot_network = function (df_map, point_color = 'blue', line_color = point_color,
map_title = 'Top Routes', background_fill = 'grey',
map_state_lines = 'black', map_fill = 'black' )
{
df_map <- subset(df_map, ORIGIN!=DEST)
df_map <- na.omit(df_map)
df_map <-subset(df_map, origin_lat!=dest_lat)
# scaling function.  Could use some work.
range01 <- function(x){(x+1-min(x))/(max(x)-min(x))}
#range01 <- function(x){(log(x)-min(log(x)))/(max(log(x))-min(log(x)))}
# need to plot state lines
states_map <- map_data("state")
# Make a color pallate between two colors.  Grey is default first color.
col.1 <- adjustcolor('grey', alpha=0.4)
col.2 <- adjustcolor(line_color, alpha=.8)
edge.pal <- colorRampPalette(c(col.1, col.2), alpha = TRUE)
edge.col <- edge.pal(10)
# add a column for color indexing scaled by number of flights on each leg.
# make sure any 0 are set to minimum of 1, because R starts at 1.  Argh.
df_map$color_ind <- round(range01(df_map$flights)*10)
df_map$color_ind[df_map$color_ind==0] <- 1
# add and scale total number of flights
df_map$total_flts_scaled <- range01(df_map$flights)
# find counts of flights leaving by iata code, add to df_map as airport counts
airport_counts_df <- as.data.frame(df_map %>% group_by(ORIGIN) %>%
summarise(counts = n()))
df_map <- merge(df_map, airport_counts_df, by='ORIGIN')
# scale and add back to df
df_map$airpot_counts_scaled <- range01(df_map$counts)
# actual plotting
gg <- ggplot()
gg <- gg + geom_map(data=states_map, map=states_map, aes(map_id=region),
color=map_state_lines, fill=map_fill, size=0.25) +
expand_limits(x=states_map$long, y=states_map$lat)
gg <- gg + labs(x=NULL, y=NULL, title=map_title) +
theme_void() + # Empty theme without axis lines and texts
theme(panel.background = element_rect(fill=background_fill, colour=background_fill),
plot.background = element_rect(fill=background_fill, color=background_fill))
#coord_map("albers", lat0=39, lat1=49) +
#coord_map("albers", lat0=39, lat1=49) +
gg <- gg +
# The geom points are plotted scaled 0 to 1.  The factor can be adjusted
geom_point(data=df_map, aes(x=origin_lon, y=origin_lat),
#col=point_color,
shape = 21, colour = "black", fill = point_color,
size=(df_map$airpot_counts_scaled)*4) +
geom_curve(data = df_map,
aes(x=origin_lon, y=origin_lat, xend=dest_lon, yend=dest_lat),
# color is selected by index from the predefined color pallete above
# needs to be rounded to an int between 1 and 10
col = edge.col[df_map$color_ind],
# size is scaled 0 to 1
size = (df_map$total_flts_scaled),
curvature = 0.3, angle = 90, ncp = 5)
gg
}
for(yr in c(1998, 2018)){
for(al in c("AA", "DL", "UA", "WN")){
# create variable name
var_df <- paste0(al, '_', yr)
print(var_df)
plot_title <- paste0('Plot of ', al, ' in ', yr)
}}
plot_network(df_map=DL_1998, map_title="Delta in 1998", point_color='blue')
plot_network(df_map=DL_2018, map_title='Delta in 2018', point_color='blue')
plot_network(df_map=AA_1998, map_title="American in 1998", point_color='red')
plot_network(df_map=AA_2018, map_title='American in 2018', point_color='red')
plot_network(df_map=WN_1998, map_title="Southwest in 1998", point_color='orange')
plot_network(df_map=WN_2018, map_title='Southwest in 2018', point_color='orange')
plot_network(df_map=UA_1998, map_title="United in 1998", point_color='gold3')
plot_network(df_map=UA_2018, map_title='United in 2018', point_color='gold3')
View(WN_2018)
g_w <- graph.data.frame(WN_2018, directed = TRUE)
plot(gw)
plot(g_w)
w_df <- WN_2018 %>% select(ORIGIN, DEST, flights) %>% rename(from = ORIGIN, to = DEST, weight = flights)
View(w_df)
g_w <- graph.data.frame(w_df, directed = TRUE)
plot(g_w)
plot(g_w, layout=layout_in_circle)
plot(g_w, layout=layout_with_lgl)
plot(g_w, layout=layout_on_sphere)
plot(g_w, layout=layout_with_lgl)
# First lets create an iGraph from literal by defining the edges.
g_class <- (graph_from_literal(
Adwoa+-+Rashmi,
Rashmi+-+Chirag,
Chirag+-+Adwoa,
Adwoa+-+Alex,
Alex+-+Armand,
Alex+-+Bin,
Alex+-+Patrick,
Alex+-+Caroline,
Bin+-+Caroline,
Bin+-+Patrick,
Patrick+-+Fahim,
Patrick+-+Ashigh,
Patrick+-+Caroline,
Patrick+-+Fahim,
Caroline+--Wenyu,
Wenyu+-+Winnie,
Winnie--+Patrick
)
)
loadPkg("igraph")
library(igraph) # Load the igraph package
loadPkg("networkD3")
library(networkD3)
# This function will install any packages you dont have installed already.
loadPkg = function(x) { if
(!require(x,character.only=T, quietly =T))
{ install.packages(x,dep=T,repos="http://cran.us.r-project.org");
if(!require(x,character.only=T)) stop("Package not found") } }
loadPkg("igraph")
library(igraph) # Load the igraph package
loadPkg("networkD3")
library(networkD3)
loadPkg("threejs")
library(threejs)
# First lets create an iGraph from literal by defining the edges.
g_class <- (graph_from_literal(
Adwoa+-+Rashmi,
Rashmi+-+Chirag,
Chirag+-+Adwoa,
Adwoa+-+Alex,
Alex+-+Armand,
Alex+-+Bin,
Alex+-+Patrick,
Alex+-+Caroline,
Bin+-+Caroline,
Bin+-+Patrick,
Patrick+-+Fahim,
Patrick+-+Ashigh,
Patrick+-+Caroline,
Patrick+-+Fahim,
Caroline+--Wenyu,
Wenyu+-+Winnie,
Winnie--+Patrick
)
)
# We can use iGraph to plot, but its ultimately unsatisfying.
plot(g_class)
# We can control many of the features, but still not a great visualization.
plot(g_class, edge.arrow.size=.5, vertex.color="gold", vertex.size=20,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=1, vertex.label.dist=2, edge.curved=0.6)
# Using NetworkD3 to make an interactive visual
# First translate igraph object to a networkd3 object
g_class_d3 <- igraph_to_networkD3(g_class)
# then we canmake a simple plot
simpleNetwork(g_class_d3$links)
# force network gives us more options.
forceNetwork(Links = g_class_d3$links, Nodes = g_class_d3$nodes, Source = "source",
Target = "target", NodeID = "name", Group = "name", bounded = TRUE,
opacityNoHover = TRUE, opacity = .6)
# We can use graphjs function from threejs to make a bit more fun, interactive 3d plot.
# only way I could get the vertex labels to populate was to use the d3 object.
graphjs(g_class, vertex.label = g_class_d3$nodes$name, main='Network Science Class, Spring 2020',
vertex.color = 'blue', vertex.shape = 'sphere')
length(E(g_class))
plot_network(df_map=WN_1998, map_title="Southwest in 1998", point_color='orange')
library(threejs)
g_d3 <- igraph_to_networkD3(g_w)
# then we canmake a simple plot
simpleNetwork(g_d3$links)
# force network gives us more options.
forceNetwork(Links = g_d3$links, Nodes = g_d3$nodes, Source = "source",
Target = "target", NodeID = "name", Group = "name", bounded = TRUE,
opacityNoHover = TRUE, opacity = .6)
View(w_df)
View(w_df)
w_df <- w_df[1:500]
g_w <- graph.data.frame(w_df, directed = TRUE)
plot(g_w)
g_d3 <- igraph_to_networkD3(g_w)
# then we canmake a simple plot
simpleNetwork(g_d3$links)
# force network gives us more options.
forceNetwork(Links = g_d3$links, Nodes = g_d3$nodes, Source = "source",
Target = "target", NodeID = "name", Group = "name", bounded = TRUE,
opacityNoHover = TRUE, opacity = .6)
plot(g_w, layout=layout_with_fr)
plot(g_w, layout=layout_with_lgl)
plot(g_w, layout=layout_on_sphere)
plot(g_w, layout=layout_with_fr)
tkplot(g_w)
install.packages("tkrplot")
library(tkrplot)
library(tcltk)
install.packages("tcltk2")
library(tkrplot)
library(tcltk2)
library(tcltk)
detach("package:tcltk", unload = TRUE)
detach("package:tcltk2", unload = TRUE)
library(tcltk)
