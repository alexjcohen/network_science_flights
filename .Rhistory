library(faraway)
loadPkg('caret')        # used for creating different models and confusion matrices
library(caret)
loadPkg('class')        #for knn
library(class)
loadPkg('gmodels')      #for cross table
library(gmodels)
loadPkg('glmnet')       # for Lasso and Ridge
library(glmnet)
loadPkg('ggcorrplot')   # for Correlation plot
library(ggcorrplot)
loadPkg("igraph")
library(igraph)
loadPkg("leaps")
loadPkg("ISLR")
loadPkg("FNN")
loadPkg("gmodels")
library(igraph)
karate <- make_graph("Zachary")
wc <- cluster_walktrap(karate)
modularity(wc)
membership(wc)
plot(wc, karate)
karate <- make_graph("Zachary")
library(igraph) # Load the igraph package
karate <- make_graph("Zachary")
wc <- cluster_walktrap(karate)
modularity(wc)
membership(wc)
plot(wc, karate)
View(wc)
enron <- make_graph("Enron")
enron <- make_graph("enron")
wc <- cluster_walktrap(enron)
enron <- make_graph("enron")
g_class <- (graph_from_literal(
Adwoa+-+Rashmi,
Rashmi+-+Chirag,
Chirag+-+Adwoa,
Adwoa+-+Alex,
Alex+-+Armand,
Alex+-+Bin,
Alex+-+Patrick,
Alex+-+Caroline,
Bin+-+Caroline,
Bin+-+Patrick,
Patrick+-+Fahim,
Patrick+-+Ashigh,
Patrick+-+Caroline,
Patrick+-+Fahim,
Caroline+--Wenyu,
Wenyu+-+Winnie,
Winnie--+Patrick
)
plot(g_class)
plot(g_class)
g_class <- (graph_from_literal(
Adwoa+-+Rashmi,
Rashmi+-+Chirag,
Chirag+-+Adwoa,
Adwoa+-+Alex,
Alex+-+Armand,
Alex+-+Bin,
Alex+-+Patrick,
Alex+-+Caroline,
Bin+-+Caroline,
Bin+-+Patrick,
Patrick+-+Fahim,
Patrick+-+Ashigh,
Patrick+-+Caroline,
Patrick+-+Fahim,
Caroline+--Wenyu,
Wenyu+-+Winnie,
Winnie--+Patrick
)
)
plot(g_class)
plot(g_class, edge.arrow.size=2, vertex.color="gold", vertex.size=20,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=1, vertex.label.dist=8, edge.curved=0.2)
plot(g_class, edge.arrow.size=.5, vertex.color="gold", vertex.size=20,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=1, vertex.label.dist=8, edge.curved=0.2)
plot(g_class, edge.arrow.size=.5, vertex.color="gold", vertex.size=20,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=1, vertex.label.dist=2, edge.curved=0.6)
gl <- graph_from_literal(a-b-c-d-e-f, a-g-h-b, h-e:f:i, j)
plot(gl)
gl <- graph_from_literal(a-b-c-d-e-f, a-g-h-b, h-e:f:i, j)
plot(gl)
g_class <- (graph_from_literal(
Chiang+-+Rashmi,
Winnie+-+Wenyu,
Caroline+-+Patrick,
Bin+-+Patrick,
Alex+-+Bin,
Patrick+-+Alex,
Fahim+--Patrick)
)
plot(g_class)
# Add attributes to the network, vertices, or edges:
V(g4)$name # automatically generated when we created the network.
V(g4)$gender <- c("male", "male", "male", "male", "female", "female", "male")
g4 <- graph( c("John", "Jim", "Jim", "Jack", "Jim", "Jack", "John", "John"),
isolates=c("Jesse", "Janis", "Jennifer", "Justin") )
# Access vertices and edges:
E(g4) # The edges of the object
V(g4) # The vertices of the object
# You can examine the network matrix directly:
g4[]
g4[1,]
# Add attributes to the network, vertices, or edges:
V(g4)$name # automatically generated when we created the network.
V(g4)$gender <- c("male", "male", "male", "male", "female", "female", "male")
E(g4)$type <- "email" # Edge attribute, assign "email" to all edges
E(g4)$weight <- 10    # Edge weight, setting all existing edges to 10
# Examine attributes
edge_attr(g4)
vertex_attr(g4)
graph_attr(g4)
# Another way to set attributes
# (you can similarly use set_edge_attr(), set_vertex_attr(), etc.)
g4 <- set_graph_attr(g4, "name", "Email Network")
g4 <- set_graph_attr(g4, "something", "A thing")
graph_attr_names(g4)
graph_attr(g4, "name")
graph_attr(g4)
plot(g4)
plot(g4, edge.arrow.size=.5, vertex.label.color="black", vertex.label.dist=1.5,
vertex.color=c( "pink", "skyblue")[1+(V(g4)$gender=="male")] )
g4s <- simplify( g4, remove.multiple = T, remove.loops = F,
edge.attr.comb=list(weight="sum", type="ignore") )
plot(g4s, vertex.label.dist=1.5)
g4s
library(tkid)
library(tkplot)
install.packages("tkplot")
install.packages("networkD3")
library(networkD3)
p <- simpleNetwork(g_class, height="100px", width="100px")
g_class <- (graph_from_literal(
Adwoa+-+Rashmi,
Rashmi+-+Chirag,
Chirag+-+Adwoa,
Adwoa+-+Alex,
Alex+-+Armand,
Alex+-+Bin,
Alex+-+Patrick,
Alex+-+Caroline,
Bin+-+Caroline,
Bin+-+Patrick,
Patrick+-+Fahim,
Patrick+-+Ashigh,
Patrick+-+Caroline,
Patrick+-+Fahim,
Caroline+--Wenyu,
Wenyu+-+Winnie,
Winnie--+Patrick
)
)
p <- simpleNetwork(g_class, height="100px", width="100px")
igraph_to_networkD3(g_class)
plot(igraph_to_networkD3(g_class))
View(g_class)
g_class[[1]]
g_class[[4]]
g_class_d3 <- igraph_to_networkD3(g_class)
View(g_class_d3)
p <- simpleNetwork(g_class_d3)
View(g_class)
View(g_class_d3)
p <- simpleNetwork(g_class_d3)
g_class_d3 <- igraph_to_networkD3(g_class)
plot(g_class_d3)
install.packages("threejs")
library(threejs)
graphjs(g_class)
graphjs(g_class, showLabels=T)
class.js <- igraph2graphjs(g_class)
class.js <- igraph2graphjs(g_class)
library(igraph) # Load the igraph package
g_class_d3 <- igraph_to_networkD3(g_class)
class.js <- igraph2graphjs(g_class)
graphjs(g_class, showLabels=T)
library(igraph)
g <- make_ring(10) %>%
set_edge_attr("weight", value = 1:10) %>%
set_edge_attr("color", value = "red") %>%
set_vertex_attr("name", value = letters[1:10])
(G <- igraph2graphjs(g))
g_class <- (graph_from_literal(
Adwoa+-+Rashmi,
Rashmi+-+Chirag,
Chirag+-+Adwoa,
Adwoa+-+Alex,
Alex+-+Armand,
Alex+-+Bin,
Alex+-+Patrick,
Alex+-+Caroline,
Bin+-+Caroline,
Bin+-+Patrick,
Patrick+-+Fahim,
Patrick+-+Ashigh,
Patrick+-+Caroline,
Patrick+-+Fahim,
Caroline+--Wenyu,
Wenyu+-+Winnie,
Winnie--+Patrick
)
)
plot(g_class)
plot(g_class, edge.arrow.size=.5, vertex.color="gold", vertex.size=20,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=1, vertex.label.dist=2, edge.curved=0.6)
graphjs(g_class, showLabels=T)
class.js <- igraph2graphjs(g_class)
class.js <- igraph.to.graphNEL (g_class)
class.js <- igraph.to.graphNEL (g_class)
g_class_d3 <- igraph_to_networkD3(g_class)
g_class_d3 <- igraph_to_networkD3(g_class)
plot(g_class_d3)
g_class_d3
forceNetwork(Links = g_class_d3$links, Nodes = g_class_d3$nodes)
forceNetwork(Links = g_class_d3$links, Nodes = g_class_d3$nodes, NodeID = 'name')
simpleNetwork(Links = g_class_d3$links, Nodes = g_class_d3$nodes)
simpleNetwork(g_class_d3$links, g_class_d3$nodes)
View(g_class_d3)
V(g_class)
g_class$nodes
View(g_class)
E(g_class)
View(g_class_d3)
graphjs(g_class)
graphjs(g_class, showLabels=TRUE)
graphjs(g_class, vertex.label =TRUE)
graphjs(g_class, vertex.label = 'name')
graphjs(g_class, vertex.label = 'Name')
graphjs(g_class_d3, vertex.label = 'Name')
graphjs(g_class, vertex.label = T)
graphjs(g_class, vertex.label = T)
graphjs(g_class, vertex.label = T, main='Network Science Class, Sprin 2020')
graphjs(g_class, vertex.label = T, main='Network Science Class, Sprin 2020',
vertex.color = 'blue')
graphjs(g_class, vertex.label = T, main='Network Science Class, Sprin 2020',
vertex.color = 'blue', vertex.shape=T)
graphjs(g_class, vertex.label = T, main='Network Science Class, Sprin 2020',
vertex.color = 'blue', vertex.shape=F)
graphjs(g_class, vertex.label = T, main='Network Science Class, Sprin 2020',
vertex.color = 'blue')
graphjs(g_class, vertex.label = T, main='Network Science Class, Sprin 2020',
vertex.color = 'blue', vertex.shape = 'square')
graphjs(g_class, vertex.label = T, main='Network Science Class, Sprin 2020',
vertex.color = 'blue', vertex.shape = 'sphere')
View(g_class)
g_class[[1]]
g_class[[2]]
graphjs(g_class, vertex.label = V(g_class), main='Network Science Class, Sprin 2020',
vertex.color = 'blue', vertex.shape = 'sphere')
names <- V(g_class)
graphjs(g_class, vertex.label = names, main='Network Science Class, Sprin 2020',
vertex.color = 'blue', vertex.shape = 'sphere')
g_class_d3 <- igraph_to_networkD3(g_class)
View(g_class_d3)
simpleNetwork(g_class_d3$links$source, g_class_d3$links$target)
simpleNetwork(g_class_d3$links)
forceNetwork(Links = g_class_d3$links, Nodes = g_class_d3$nodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name", opacity = 0.8)
data(MisLinks)
mis_linkes <- data(MisLinks)
forceNetwork(Links = g_class_d3$links, Nodes = g_class_d3$nodes,
Source = g_class_d3$links$source, Target = g_class_d3$links$target,
NodeID = g_class_d3$nodes$name, opacity = 0.8)
forceNetwork(g_class_d3)
View(g_class_d3)
g_class_d3[["links"]][["source"]]
g_class_d3[["nodes"]][["name"]]
forceNetwork(
Source = g_class_d3$links$source, Target = g_class_d3$links$target,
NodeID = g_class_d3$nodes$name, opacity = 0.8)
forceNetwork(Links = g_class_d3[["links"]][["source"]], Nodes = g_class_d3$nodes,
opacity = 0.8)
forceNetwork(Links = g_class_d3[["links"]], Nodes = g_class_d3$nodes,
opacity = 0.8)
forceNetwork(Links = g_class_d3[["links"]][["source"]], Nodes = g_class_d3$nodes,
NodeID = g_class_d3$nodes$name, opacity = 0.8)
forceNetwork(Links = g_class_d3[["links"]], Nodes = g_class_d3$nodes,
NodeID = g_class_d3$nodes$name, opacity = 0.8)
View(g_class_d3)
g_class_d3[["nodes"]][["name"]]
forceNetwork(Links = g_class_d3[["links"]], Nodes = g_class_d3$nodes,
NodeID = g_class_d3[["nodes"]][["name"]], opacity = 0.8)
forceNetwork(Links = g_class_d3[["links"]],
NodeID = g_class_d3[["nodes"]][["name"]], opacity = 0.8)
forceNetwork(Links = g_class_d3[["links"]], Nodes = g_class_d3$nodes,
NodeID = g_class_d3$nodes$name)
forceNetwork(Links = g_class_d3$links, Nodes = g_class_d3$nodes, Source = "source",
Target = "target", Value = "value", NodeID = "name")
View(g_class_d3)
g_class_d3[["links"]]
forceNetwork(Links = g_class_d3$links, Nodes = g_class_d3$nodes, Source = "source",
Target = "target", NodeID = "name")
forceNetwork(Links = g_class_d3$links, Nodes = g_class_d3$nodes, Source = "source",
Target = "target", NodeID = "name", Group = "name")
forceNetwork(Links = g_class_d3$links, Nodes = g_class_d3$nodes, Source = "source",
Target = "target", NodeID = "name", Group = F)
forceNetwork(Links = g_class_d3$links, Nodes = g_class_d3$nodes, Source = "source",
Target = "target", NodeID = "name", Group = "name")
forceNetwork(Links = g_class_d3$links, Nodes = g_class_d3$nodes, Source = "source",
Target = "target", NodeID = "name", Group = "name", bounded = TRUE,
opacityNoHover = TRUE)
forceNetwork(Links = g_class_d3$links, Nodes = g_class_d3$nodes, Source = "source",
Target = "target", NodeID = "name", Group = "name", bounded = TRUE,
opacityNoHover = TRUE, opacity = .6)
loadPkg = function(x) { if
(!require(x,character.only=T, quietly =T))
{ install.packages(x,dep=T,repos="http://cran.us.r-project.org");
if(!require(x,character.only=T)) stop("Package not found") } }
loadPkg("networkD3")
library(igraph) # Load the igraph package
loadPkg("networkD3")
library(networkD3)
loadPkg("threejs")
library(threejs)
# We can use iGraph to plot, but its ultimately unsatisfying.
plot(g_class)
plot(g_class, edge.arrow.size=.5, vertex.color="gold", vertex.size=20,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=1, vertex.label.dist=2, edge.curved=0.6)
graphjs(g_class, vertex.label = names, main='Network Science Class, Spring 2020',
vertex.color = 'blue', vertex.shape = 'sphere')
# We can use graphhs function from threejs to make a fun, 3d plot.
graphjs(g_class, vertex.label = 'names', main='Network Science Class, Spring 2020',
vertex.color = 'blue', vertex.shape = 'sphere')
# We can use graphhs function from threejs to make a fun, 3d plot.
graphjs(g_class, vertex.label = V(g_class), main='Network Science Class, Spring 2020',
vertex.color = 'blue', vertex.shape = 'sphere', show)
# We can use graphhs function from threejs to make a fun, 3d plot.
graphjs(g_class, vertex.label = V(g_class), main='Network Science Class, Spring 2020',
vertex.color = 'blue', vertex.shape = 'sphere', show)
# We can use graphhs function from threejs to make a fun, 3d plot.
graphjs(g_class, vertex.label = g_class, main='Network Science Class, Spring 2020',
vertex.color = 'blue', vertex.shape = 'sphere', show)
# We can use graphhs function from threejs to make a fun, 3d plot.
graphjs(g_class, vertex.label = names, main='Network Science Class, Spring 2020',
vertex.color = 'blue', vertex.shape = 'sphere', show)
# We can use graphhs function from threejs to make a fun, 3d plot.
graphjs(g_class, vertex.label = F, main='Network Science Class, Spring 2020',
vertex.color = 'blue', vertex.shape = 'sphere', show)
# We can use graphhs function from threejs to make a fun, 3d plot.
graphjs(g_class, vertex.label = F, main='Network Science Class, Spring 2020',
vertex.color = 'blue', vertex.shape = 'sphere', show)
# We can use graphhs function from threejs to make a fun, 3d plot.
graphjs(g_class, vertex.label = names, main='Network Science Class, Spring 2020',
vertex.color = 'blue', vertex.shape = 'sphere')
# We can use graphhs function from threejs to make a fun, 3d plot.
graphjs(g_class, vertex.label = 'names', main='Network Science Class, Spring 2020',
vertex.color = 'blue', vertex.shape = 'sphere')
# We can use graphhs function from threejs to make a fun, 3d plot.
graphjs(g_class, vertex.label = T, main='Network Science Class, Spring 2020',
vertex.color = 'blue', vertex.shape = 'sphere')
# We can use graphhs function from threejs to make a fun, 3d plot.
graphjs(g_class, vertex.label = g_class_d3$nodes$name, main='Network Science Class, Spring 2020',
vertex.color = 'blue', vertex.shape = 'sphere')
g_class_d3$nodes$name
# Using NetworkD3 to make an interactive visual
# First translate igraph object to a networkd3 object
g_class_d3 <- igraph_to_networkD3(g_class)
# then we canmake a simple plot
simpleNetwork(g_class_d3$links)
# force network gives us more options.
forceNetwork(Links = g_class_d3$links, Nodes = g_class_d3$nodes, Source = "source",
Target = "target", NodeID = "name", Group = "name", bounded = TRUE,
opacityNoHover = TRUE, opacity = .6)
# We can use graphjs function from threejs to make a bit more fun, interactive 3d plot.
# only way I could get the vertex labels to populate was to use the d3 object.
graphjs(g_class, vertex.label = g_class_d3$nodes$name, main='Network Science Class, Spring 2020',
vertex.color = 'blue', vertex.shape = 'sphere')
source('~/Documents/GWU/DATS 6450_16 Network/class_network.r')
# This function will install any packages you dont have installed already.
loadPkg = function(x) { if
(!require(x,character.only=T, quietly =T))
{ install.packages(x,dep=T,repos="http://cran.us.r-project.org");
if(!require(x,character.only=T)) stop("Package not found") } }
loadPkg("networkD3")
library(igraph) # Load the igraph package
loadPkg("networkD3")
library(networkD3)
loadPkg("threejs")
library(threejs)
# First lets create an iGraph from literal by defining the edges.
g_class <- (graph_from_literal(
Adwoa+-+Rashmi,
Rashmi+-+Chirag,
Chirag+-+Adwoa,
Adwoa+-+Alex,
Alex+-+Armand,
Alex+-+Bin,
Alex+-+Patrick,
Alex+-+Caroline,
Bin+-+Caroline,
Bin+-+Patrick,
Patrick+-+Fahim,
Patrick+-+Ashigh,
Patrick+-+Caroline,
Patrick+-+Fahim,
Caroline+--Wenyu,
Wenyu+-+Winnie,
Winnie--+Patrick
)
)
# We can use iGraph to plot, but its ultimately unsatisfying.
plot(g_class)
# We can control many of the features, but still not a great visualization.
plot(g_class, edge.arrow.size=.5, vertex.color="gold", vertex.size=20,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=1, vertex.label.dist=2, edge.curved=0.6)
# Using NetworkD3 to make an interactive visual
# First translate igraph object to a networkd3 object
g_class_d3 <- igraph_to_networkD3(g_class)
# then we canmake a simple plot
simpleNetwork(g_class_d3$links)
# force network gives us more options.
forceNetwork(Links = g_class_d3$links, Nodes = g_class_d3$nodes, Source = "source",
Target = "target", NodeID = "name", Group = "name", bounded = TRUE,
opacityNoHover = TRUE, opacity = .6)
# We can use graphjs function from threejs to make a bit more fun, interactive 3d plot.
# only way I could get the vertex labels to populate was to use the d3 object.
graphjs(g_class, vertex.label = g_class_d3$nodes$name, main='Network Science Class, Spring 2020',
vertex.color = 'blue', vertex.shape = 'sphere')
# This function will install any packages you dont have installed already.
loadPkg = function(x) { if
(!require(x,character.only=T, quietly =T))
{ install.packages(x,dep=T,repos="http://cran.us.r-project.org");
if(!require(x,character.only=T)) stop("Package not found") } }
loadPkg("networkD3")
library(igraph) # Load the igraph package
loadPkg("networkD3")
library(networkD3)
loadPkg("threejs")
library(threejs)
# First lets create an iGraph from literal by defining the edges.
g_class <- (graph_from_literal(
Adwoa+-+Rashmi,
Rashmi+-+Chirag,
Chirag+-+Adwoa,
Adwoa+-+Alex,
Alex+-+Armand,
Alex+-+Bin,
Alex+-+Patrick,
Alex+-+Caroline,
Bin+-+Caroline,
Bin+-+Patrick,
Patrick+-+Fahim,
Patrick+-+Ashigh,
Patrick+-+Caroline,
Patrick+-+Fahim,
Caroline+--Wenyu,
Wenyu+-+Winnie,
Winnie--+Patrick
)
)
# We can use iGraph to plot, but its ultimately unsatisfying.
plot(g_class)
# We can control many of the features, but still not a great visualization.
plot(g_class, edge.arrow.size=.5, vertex.color="gold", vertex.size=20,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=1, vertex.label.dist=2, edge.curved=0.6)
# Using NetworkD3 to make an interactive visual
# First translate igraph object to a networkd3 object
g_class_d3 <- igraph_to_networkD3(g_class)
# then we canmake a simple plot
simpleNetwork(g_class_d3$links)
# force network gives us more options.
forceNetwork(Links = g_class_d3$links, Nodes = g_class_d3$nodes, Source = "source",
Target = "target", NodeID = "name", Group = "name", bounded = TRUE,
opacityNoHover = TRUE, opacity = .6)
# We can use graphjs function from threejs to make a bit more fun, interactive 3d plot.
# only way I could get the vertex labels to populate was to use the d3 object.
graphjs(g_class, vertex.label = g_class_d3$nodes$name, main='Network Science Class, Spring 2020',
vertex.color = 'blue', vertex.shape = 'sphere')
# This function will install any packages you dont have installed already.
loadPkg = function(x) { if
(!require(x,character.only=T, quietly =T))
{ install.packages(x,dep=T,repos="http://cran.us.r-project.org");
if(!require(x,character.only=T)) stop("Package not found") } }
loadPkg('dplyr')
library(dplyr)
loadPkg('readr')
library(readr)
loadPkg("igraph")
library(igraph) # Load the igraph package
loadPkg("networkD3")
library(networkD3)
loadPkg("threejs")
library(threejs)
loadPkg('maps')
library(maps)
loadPkg('geosphere')
library(geosphere)
df <- read_csv('data/ontime_rpt_201901.csv')
setwd("~/Documents/projects/network_science_flights")
df <- read_csv('data/ontime_rpt_201901.csv')
str(df)
summary(df)
head(df)
edges <- select(df, DEST, ORIGIN)
head(edges)
flight_graph <- graph_from_data_frame(edges[:1000], directed=T)
flight_graph <- graph_from_data_frame(edges, directed=T)
plot(flight_graph)
degree(flight_graph)
