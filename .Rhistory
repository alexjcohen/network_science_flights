observed_mean_dist <- mean_distance(g)
observed_diameter <- diameter(g)
# get random network params
numb_edges <- length(E(g))
numb_vertices <-length(V(g))
numb_flights <- sum(df$flights) # attempt to make rand grapgh with edges == total weight
# make a new df with all the stats for later use
metrics_df <- data.frame(observed_betweenness, observed_strength, observed_mean_dist, observed_diameter,
numb_vertices, numb_edges, numb_flights)
print(colMeans(metrics_df))
return(metrics_df)
}
all_1998_weighted_metrics <- get_weighted_metrics(all_flights_1998)
get_null_df_and_metrics <-function(df) {
# select origin, dest, flights, make flights = to weight
air_df = df %>% select(ORIGIN, DEST) %>% rename(from = ORIGIN, to = DEST)
# select unweighted or weighted
#weighted_df <- (df %>% select(ORIGIN, DEST, flights) %>%
#                                    rename(from = ORIGIN, to = DEST, weight = flights))
#weighted_g <- graph.data.frame(weighted_df, directed = TRUE)
#g <- weighted_g
unweighted_g <- graph_from_edgelist(df %>% select(ORIGIN, DEST) %>% as.matrix())
g <- unweighted_g
print(is_weighted(g))
# get metrics of observed network
observed_deg <- (degree(g, mode = "all"))
observed_betweenness <- (betweenness(g))
observed_mean_dist <- mean_distance(g)
observed_diameter <- diameter(g)
# get random network params
numb_edges <- length(E(g))
numb_vertices <-length(V(g))
numb_flights <- sum(df$flights) # attempt to make rand grapgh with edges == total weight
p_edges <- (numb_edges/(numb_vertices*(numb_vertices-1)))
# make random network
rand_g <- sample_gnp(n=numb_vertices, p=p_edges, directed=TRUE) %>%
set_vertex_attr("label", value = V(g))
V(rand_g)$name <- V(g)$name # name random network vertices same as original graphs
# get metrics from random network
rand_betweenness = (betweenness(rand_g))
rand_deg <- (degree(rand_g, mode='all'))
rand_mean_dist <- mean_distance(rand_g)
rand_diameter <- diameter(rand_g)
# make random g into a df
rand_df <- as_data_frame(rand_g)
names(rand_df) <- c('ORIGIN', 'DEST') # used for joining back to original coordinates
# get the lat and longs
original_origins <- select(df, c(ORIGIN, origin_lat, origin_lon))
original_dests <- select(df, c(DEST, dest_lat, dest_lon))
# combine random network nodes with lat/lons, dedupe
rand_df_coords <- merge(rand_df, original_origins, by='ORIGIN', all.x=T)
rand_df_coords <- merge(rand_df_coords, original_dests, by='DEST', all.x=T)
rand_df_coords_deduped <-  rand_df_coords[!duplicated(rand_df_coords), ]
# make a new df with all the stats for later use
metrics_df <- data.frame(observed_betweenness, observed_deg, observed_mean_dist, observed_diameter,
rand_betweenness, rand_deg, rand_mean_dist, rand_diameter,
numb_vertices, numb_edges, numb_flights)
print(colMeans(metrics_df))
return(list('rand_df' =rand_df_coords_deduped, 'metrics_df' = metrics_df))
}
#Unweighted metrics for presentation
results <- get_null_df_and_metrics(all_flights_1998)
all_1998_rand_Df <- results$rand_df
all_1998_metrics <- results$metrics_df
all_1998_summary <- data.frame(colMeans(all_1998_metrics))
print(test)
# Experimentation with random weights for the weighted graph
#wn_2018_rand_df$flights <- sample(1:5,nrow(wn_2018_rand_df),replace=TRUE)
#WN_2018$flights <- sample(1:5,nrow(WN_2018),replace=TRUE)
# use plot network function from "Data_Pipeline_with_maps"
plot_network_unweighted(df_map=all_1998_rand_Df , map_title="Null Model, 1998", point_color='green')
plot_network_unweighted = function (df_map, point_color = 'blue', line_color = point_color,
map_title = 'Top Routes', background_fill = 'grey',
map_state_lines = 'black', map_fill = 'black' )
{
df_map <- subset(df_map, ORIGIN!=DEST)
df_map <- na.omit(df_map)
df_map <-subset(df_map, origin_lat!=dest_lat)
# scaling function.  Could use some work.
range01 <- function(x){(x+1-min(x))/(max(x)-min(x))}
#range01 <- function(x){(log(x)-min(log(x)))/(max(log(x))-min(log(x)))}
# need to plot state lines
states_map <- map_data("state")
# find counts of flights leaving by iata code, add to df_map as airport counts
airport_counts_df <- as.data.frame(df_map %>% group_by(ORIGIN) %>%
summarise(counts = n()))
df_map <- merge(df_map, airport_counts_df, by='ORIGIN')
# scale and add back to df
df_map$airpot_counts_scaled <- range01(df_map$counts)
# actual plotting
gg <- ggplot()
gg <- gg + geom_map(data=states_map, map=states_map, aes(map_id=region),
color=map_state_lines, fill=map_fill, size=0.25) +
expand_limits(x=states_map$long, y=states_map$lat)
gg <- gg + labs(x=NULL, y=NULL, title=map_title) +
theme_void() + # Empty theme without axis lines and texts
theme(panel.background = element_rect(fill=background_fill, colour=background_fill),
plot.background = element_rect(fill=background_fill, color=background_fill))
#coord_map("albers", lat0=39, lat1=49) +
#coord_map("albers", lat0=39, lat1=49) +
gg <- gg +
# The geom points are plotted scaled 0 to 1.  The factor can be adjusted
geom_point(data=df_map, aes(x=origin_lon, y=origin_lat),
#col=point_color,
shape = 21, colour = "black", fill = point_color,
size=(df_map$airpot_counts_scaled)*4) +
geom_curve(data = df_map,
aes(x=origin_lon, y=origin_lat, xend=dest_lon, yend=dest_lat),
# color is selected by index from the predefined color pallete above
# needs to be rounded to an int between 1 and 10
col = line_color,
alpha=.04,
curvature = 0.3, angle = 90, ncp = 5)
gg
}
# Experimentation with random weights for the weighted graph
#wn_2018_rand_df$flights <- sample(1:5,nrow(wn_2018_rand_df),replace=TRUE)
#WN_2018$flights <- sample(1:5,nrow(WN_2018),replace=TRUE)
# use plot network function from "Data_Pipeline_with_maps"
plot_network_unweighted(df_map=all_1998_rand_Df , map_title="Null Model, 1998", point_color='green')
library(ggplot2)
library(maps)
library(ggmap)
plot_network = function (df_map, point_color = 'blue', line_color = point_color,
map_title = 'Top Routes', background_fill = 'grey',
map_state_lines = 'black', map_fill = 'black' )
{
df_map <- subset(df_map, ORIGIN!=DEST)
df_map <- na.omit(df_map)
df_map <-subset(df_map, origin_lat!=dest_lat)
# scaling function.  Could use some work.
range01 <- function(x){(x+1-min(x))/(max(x)-min(x))}
#range01 <- function(x){(log(x)-min(log(x)))/(max(log(x))-min(log(x)))}
# need to plot state lines
states_map <- map_data("state")
# Make a color pallate between two colors.  Grey is default first color.
col.1 <- adjustcolor('grey', alpha=0.1)
col.2 <- adjustcolor(line_color, alpha=.2)
edge.pal <- colorRampPalette(c(col.1, col.2), alpha = TRUE)
edge.col <- edge.pal(10)
# add a column for color indexing scaled by number of flights on each leg.
# make sure any 0 are set to minimum of 1, because R starts at 1.  Argh.
df_map$color_ind <- round(range01(df_map$flights)*10)
df_map$color_ind[df_map$color_ind==0] <- 1
# add and scale total number of flights
df_map$total_flts_scaled <- range01(df_map$flights)
# find counts of flights leaving by iata code, add to df_map as airport counts
airport_counts_df <- as.data.frame(df_map %>% group_by(ORIGIN) %>%
summarise(counts = n()))
df_map <- merge(df_map, airport_counts_df, by='ORIGIN')
# scale and add back to df
df_map$airpot_counts_scaled <- range01(df_map$counts)
# actual plotting
gg <- ggplot()
gg <- gg + geom_map(data=states_map, map=states_map, aes(map_id=region),
color=map_state_lines, fill=map_fill, size=0.25) +
expand_limits(x=states_map$long, y=states_map$lat)
gg <- gg + labs(x=NULL, y=NULL, title=map_title) +
theme_void() + # Empty theme without axis lines and texts
theme(panel.background = element_rect(fill=background_fill, colour=background_fill),
plot.background = element_rect(fill=background_fill, color=background_fill))
#coord_map("albers", lat0=39, lat1=49) +
#coord_map("albers", lat0=39, lat1=49) +
gg <- gg +
# The geom points are plotted scaled 0 to 1.  The factor can be adjusted
geom_point(data=df_map, aes(x=origin_lon, y=origin_lat),
#col=point_color,
shape = 21, colour = "black", fill = point_color,
size=(df_map$airpot_counts_scaled)*4) +
geom_curve(data = df_map,
aes(x=origin_lon, y=origin_lat, xend=dest_lon, yend=dest_lat),
# color is selected by index from the predefined color pallete above
# needs to be rounded to an int between 1 and 10
col = edge.col[df_map$color_ind],
# size is scaled 0 to 1
size = (df_map$total_flts_scaled),
curvature = 0.3, angle = 90, ncp = 5)
gg
}
# Experimentation with random weights for the weighted graph
#wn_2018_rand_df$flights <- sample(1:5,nrow(wn_2018_rand_df),replace=TRUE)
#WN_2018$flights <- sample(1:5,nrow(WN_2018),replace=TRUE)
# use plot network function from "Data_Pipeline_with_maps"
plot_network_unweighted(df_map=all_1998_rand_Df , map_title="Null Model, 1998", point_color='green')
plot_network_unweighted(df_map=all_flights_1998, map_title='Unweighted Network, 1998, ', point_color='red')
plot_network_unweighted = function (df_map, point_color = 'blue', line_color = point_color,
map_title = 'Top Routes', background_fill = 'grey',
map_state_lines = 'black', map_fill = 'black' )
{
df_map <- subset(df_map, ORIGIN!=DEST)
df_map <- na.omit(df_map)
df_map <-subset(df_map, origin_lat!=dest_lat)
# scaling function.  Could use some work.
range01 <- function(x){(x+1-min(x))/(max(x)-min(x))}
#range01 <- function(x){(log(x)-min(log(x)))/(max(log(x))-min(log(x)))}
# need to plot state lines
states_map <- map_data("state")
# find counts of flights leaving by iata code, add to df_map as airport counts
airport_counts_df <- as.data.frame(df_map %>% group_by(ORIGIN) %>%
summarise(counts = n()))
df_map <- merge(df_map, airport_counts_df, by='ORIGIN')
# scale and add back to df
df_map$airpot_counts_scaled <- range01(df_map$counts)
# actual plotting
gg <- ggplot()
gg <- gg + geom_map(data=states_map, map=states_map, aes(map_id=region),
color=map_state_lines, fill=map_fill, size=0.25) +
expand_limits(x=states_map$long, y=states_map$lat)
gg <- gg + labs(x=NULL, y=NULL, title=map_title) +
theme_void() + # Empty theme without axis lines and texts
theme(panel.background = element_rect(fill=background_fill, colour=background_fill),
plot.background = element_rect(fill=background_fill, color=background_fill))
#coord_map("albers", lat0=39, lat1=49) +
#coord_map("albers", lat0=39, lat1=49) +
gg <- gg +
# The geom points are plotted scaled 0 to 1.  The factor can be adjusted
geom_point(data=df_map, aes(x=origin_lon, y=origin_lat),
#col=point_color,
shape = 21, colour = "black", fill = point_color,
size=(df_map$airpot_counts_scaled)*4) +
geom_curve(data = df_map,
aes(x=origin_lon, y=origin_lat, xend=dest_lon, yend=dest_lat),
# color is selected by index from the predefined color pallete above
# needs to be rounded to an int between 1 and 10
col = line_color,
alpha=.01,
curvature = 0.3, angle = 90, ncp = 5)
gg
}
# Experimentation with random weights for the weighted graph
#wn_2018_rand_df$flights <- sample(1:5,nrow(wn_2018_rand_df),replace=TRUE)
#WN_2018$flights <- sample(1:5,nrow(WN_2018),replace=TRUE)
# use plot network function from "Data_Pipeline_with_maps"
plot_network_unweighted(df_map=all_1998_rand_Df , map_title="Null Model, 1998", point_color='green')
plot_network_unweighted(df_map=all_flights_1998, map_title='Unweighted Network, 1998, ', point_color='red')
plot_network_unweighted = function (df_map, point_color = 'blue', line_color = point_color,
map_title = 'Top Routes', background_fill = 'grey',
map_state_lines = 'black', map_fill = 'black' )
{
df_map <- subset(df_map, ORIGIN!=DEST)
df_map <- na.omit(df_map)
df_map <-subset(df_map, origin_lat!=dest_lat)
# scaling function.  Could use some work.
range01 <- function(x){(x+1-min(x))/(max(x)-min(x))}
#range01 <- function(x){(log(x)-min(log(x)))/(max(log(x))-min(log(x)))}
# need to plot state lines
states_map <- map_data("state")
# find counts of flights leaving by iata code, add to df_map as airport counts
airport_counts_df <- as.data.frame(df_map %>% group_by(ORIGIN) %>%
summarise(counts = n()))
df_map <- merge(df_map, airport_counts_df, by='ORIGIN')
# scale and add back to df
df_map$airpot_counts_scaled <- range01(df_map$counts)
# actual plotting
gg <- ggplot()
gg <- gg + geom_map(data=states_map, map=states_map, aes(map_id=region),
color=map_state_lines, fill=map_fill, size=0.25) +
expand_limits(x=states_map$long, y=states_map$lat)
gg <- gg + labs(x=NULL, y=NULL, title=map_title) +
theme_void() + # Empty theme without axis lines and texts
theme(panel.background = element_rect(fill=background_fill, colour=background_fill),
plot.background = element_rect(fill=background_fill, color=background_fill))
#coord_map("albers", lat0=39, lat1=49) +
#coord_map("albers", lat0=39, lat1=49) +
gg <- gg +
# The geom points are plotted scaled 0 to 1.  The factor can be adjusted
geom_point(data=df_map, aes(x=origin_lon, y=origin_lat),
#col=point_color,
shape = 21, colour = "black", fill = point_color,
size=(df_map$airpot_counts_scaled)*4) +
geom_curve(data = df_map,
aes(x=origin_lon, y=origin_lat, xend=dest_lon, yend=dest_lat),
# color is selected by index from the predefined color pallete above
# needs to be rounded to an int between 1 and 10
col = line_color,
alpha=.03,
curvature = 0.3, angle = 90, ncp = 5)
gg
}
# Experimentation with random weights for the weighted graph
#wn_2018_rand_df$flights <- sample(1:5,nrow(wn_2018_rand_df),replace=TRUE)
#WN_2018$flights <- sample(1:5,nrow(WN_2018),replace=TRUE)
# use plot network function from "Data_Pipeline_with_maps"
plot_network_unweighted(df_map=all_1998_rand_Df , map_title="Null Model, 1998", point_color='green')
plot_network_unweighted(df_map=all_flights_1998, map_title='Unweighted Network, 1998, ', point_color='red')
plot_network_unweighted = function (df_map, point_color = 'blue', line_color = point_color,
map_title = 'Top Routes', background_fill = 'grey',
map_state_lines = 'black', map_fill = 'black' )
{
df_map <- subset(df_map, ORIGIN!=DEST)
df_map <- na.omit(df_map)
df_map <-subset(df_map, origin_lat!=dest_lat)
# scaling function.  Could use some work.
range01 <- function(x){(x+1-min(x))/(max(x)-min(x))}
#range01 <- function(x){(log(x)-min(log(x)))/(max(log(x))-min(log(x)))}
# need to plot state lines
states_map <- map_data("state")
# find counts of flights leaving by iata code, add to df_map as airport counts
airport_counts_df <- as.data.frame(df_map %>% group_by(ORIGIN) %>%
summarise(counts = n()))
df_map <- merge(df_map, airport_counts_df, by='ORIGIN')
# scale and add back to df
df_map$airpot_counts_scaled <- range01(df_map$counts)
# actual plotting
gg <- ggplot()
gg <- gg + geom_map(data=states_map, map=states_map, aes(map_id=region),
color=map_state_lines, fill=map_fill, size=0.25) +
expand_limits(x=states_map$long, y=states_map$lat)
gg <- gg + labs(x=NULL, y=NULL, title=map_title) +
theme_void() + # Empty theme without axis lines and texts
theme(panel.background = element_rect(fill=background_fill, colour=background_fill),
plot.background = element_rect(fill=background_fill, color=background_fill))
#coord_map("albers", lat0=39, lat1=49) +
#coord_map("albers", lat0=39, lat1=49) +
gg <- gg +
# The geom points are plotted scaled 0 to 1.  The factor can be adjusted
geom_point(data=df_map, aes(x=origin_lon, y=origin_lat),
#col=point_color,
shape = 21, colour = "black", fill = point_color,
size=(df_map$airpot_counts_scaled)*4) +
geom_curve(data = df_map,
aes(x=origin_lon, y=origin_lat, xend=dest_lon, yend=dest_lat),
# color is selected by index from the predefined color pallete above
# needs to be rounded to an int between 1 and 10
col = line_color,
alpha=.02,
curvature = 0.3, angle = 90, ncp = 5)
gg
}
# Experimentation with random weights for the weighted graph
#wn_2018_rand_df$flights <- sample(1:5,nrow(wn_2018_rand_df),replace=TRUE)
#WN_2018$flights <- sample(1:5,nrow(WN_2018),replace=TRUE)
# use plot network function from "Data_Pipeline_with_maps"
plot_network_unweighted(df_map=all_1998_rand_Df , map_title="Null Model, 1998", point_color='green')
plot_network_unweighted(df_map=all_flights_1998, map_title='Unweighted Network, 1998, ', point_color='red')
View(all_1998_summary)
all_1998_weighted_metrics <- get_weighted_metrics(all_flights_1998)
all_1998_weighted_summary <- data.frame(colMeans(all_1998_weighted_metrics))
all_2018_weighted_metrics <- get_weighted_metrics(all_flights_2018)
all_2018_weighted_summary <- data.frame(colMeans(all_2018_weighted_metrics))
get_null_df_and_metrics <-function(df) {
# select origin, dest, flights, make flights = to weight
air_df = df %>% select(ORIGIN, DEST) %>% rename(from = ORIGIN, to = DEST)
# select unweighted or weighted
#weighted_df <- (df %>% select(ORIGIN, DEST, flights) %>%
#                                    rename(from = ORIGIN, to = DEST, weight = flights))
#weighted_g <- graph.data.frame(weighted_df, directed = TRUE)
#g <- weighted_g
unweighted_g <- graph_from_edgelist(df %>% select(ORIGIN, DEST) %>% as.matrix())
g <- unweighted_g
print(is_weighted(g))
# get metrics of observed network
observed_deg <- (degree(g, mode = "all"))
observed_betweenness <- (betweenness(g))
observed_mean_dist <- mean_distance(g)
observed_diameter <- diameter(g)
# get random network params
numb_edges <- length(E(g))
numb_vertices <-length(V(g))
numb_flights <- sum(df$flights) # attempt to make rand grapgh with edges == total weight
p_edges <- (numb_edges/(numb_vertices*(numb_vertices-1)))
# make random network
rand_g <- sample_gnp(n=numb_vertices, p=p_edges, directed=TRUE) %>%
set_vertex_attr("label", value = V(g))
V(rand_g)$name <- V(g)$name # name random network vertices same as original graphs
# get metrics from random network
rand_betweenness = (betweenness(rand_g))
rand_deg <- (degree(rand_g, mode='all'))
rand_mean_dist <- mean_distance(rand_g)
rand_diameter <- diameter(rand_g)
# make random g into a df
rand_df <- as_data_frame(rand_g)
names(rand_df) <- c('ORIGIN', 'DEST') # used for joining back to original coordinates
# get the lat and longs
original_origins <- select(df, c(ORIGIN, origin_lat, origin_lon))
original_dests <- select(df, c(DEST, dest_lat, dest_lon))
# combine random network nodes with lat/lons, dedupe
rand_df_coords <- merge(rand_df, original_origins, by='ORIGIN', all.x=T)
rand_df_coords <- merge(rand_df_coords, original_dests, by='DEST', all.x=T)
rand_df_coords_deduped <-  rand_df_coords[!duplicated(rand_df_coords), ]
# make a new df with all the stats for later use
metrics_df <- data.frame(observed_betweenness, observed_deg, observed_mean_dist, observed_diameter,
rand_betweenness, rand_deg, rand_mean_dist, rand_diameter,
numb_vertices, numb_edges, numb_flights)
print(colMeans(metrics_df))
return(list('rand_df' =rand_df_coords_deduped, 'metrics_df' = metrics_df))
}
results <- get_null_df_and_metrics(all_flights_2018)
all_2018_rand_Df <- results$rand_df
all_2018_metrics <- results$metrics_df
all_2018_summary <- data.frame(colMeans(all_2018_metrics))
plot_network_unweighted(df_map=all_2018_rand_Df , map_title="Null Model, 2018", point_color='green')
plot_network_unweighted(df_map=all_flights_2018, map_title='Unweighted Network, 2018, ', point_color='red')
plot_network_unweighted = function (df_map, point_color = 'blue', line_color = point_color,
map_title = 'Top Routes', background_fill = 'grey', alpha = .02
map_state_lines = 'black', map_fill = 'black' )
{
df_map <- subset(df_map, ORIGIN!=DEST)
df_map <- na.omit(df_map)
df_map <-subset(df_map, origin_lat!=dest_lat)
# scaling function.  Could use some work.
range01 <- function(x){(x+1-min(x))/(max(x)-min(x))}
#range01 <- function(x){(log(x)-min(log(x)))/(max(log(x))-min(log(x)))}
# need to plot state lines
states_map <- map_data("state")
# find counts of flights leaving by iata code, add to df_map as airport counts
airport_counts_df <- as.data.frame(df_map %>% group_by(ORIGIN) %>%
summarise(counts = n()))
df_map <- merge(df_map, airport_counts_df, by='ORIGIN')
# scale and add back to df
df_map$airpot_counts_scaled <- range01(df_map$counts)
# actual plotting
gg <- ggplot()
gg <- gg + geom_map(data=states_map, map=states_map, aes(map_id=region),
color=map_state_lines, fill=map_fill, size=0.25) +
expand_limits(x=states_map$long, y=states_map$lat)
gg <- gg + labs(x=NULL, y=NULL, title=map_title) +
theme_void() + # Empty theme without axis lines and texts
theme(panel.background = element_rect(fill=background_fill, colour=background_fill),
plot.background = element_rect(fill=background_fill, color=background_fill))
#coord_map("albers", lat0=39, lat1=49) +
#coord_map("albers", lat0=39, lat1=49) +
gg <- gg +
# The geom points are plotted scaled 0 to 1.  The factor can be adjusted
geom_point(data=df_map, aes(x=origin_lon, y=origin_lat),
#col=point_color,
shape = 21, colour = "black", fill = point_color,
size=(df_map$airpot_counts_scaled)*4) +
geom_curve(data = df_map,
aes(x=origin_lon, y=origin_lat, xend=dest_lon, yend=dest_lat),
# color is selected by index from the predefined color pallete above
# needs to be rounded to an int between 1 and 10
col = line_color,
alpha=alpha,
curvature = 0.3, angle = 90, ncp = 5)
gg
}
plot_network_unweighted = function (df_map, point_color = 'blue', line_color = point_color,
map_title = 'Top Routes', background_fill = 'grey', alpha = .02,
map_state_lines = 'black', map_fill = 'black' )
{
df_map <- subset(df_map, ORIGIN!=DEST)
df_map <- na.omit(df_map)
df_map <-subset(df_map, origin_lat!=dest_lat)
# scaling function.  Could use some work.
range01 <- function(x){(x+1-min(x))/(max(x)-min(x))}
#range01 <- function(x){(log(x)-min(log(x)))/(max(log(x))-min(log(x)))}
# need to plot state lines
states_map <- map_data("state")
# find counts of flights leaving by iata code, add to df_map as airport counts
airport_counts_df <- as.data.frame(df_map %>% group_by(ORIGIN) %>%
summarise(counts = n()))
df_map <- merge(df_map, airport_counts_df, by='ORIGIN')
# scale and add back to df
df_map$airpot_counts_scaled <- range01(df_map$counts)
# actual plotting
gg <- ggplot()
gg <- gg + geom_map(data=states_map, map=states_map, aes(map_id=region),
color=map_state_lines, fill=map_fill, size=0.25) +
expand_limits(x=states_map$long, y=states_map$lat)
gg <- gg + labs(x=NULL, y=NULL, title=map_title) +
theme_void() + # Empty theme without axis lines and texts
theme(panel.background = element_rect(fill=background_fill, colour=background_fill),
plot.background = element_rect(fill=background_fill, color=background_fill))
#coord_map("albers", lat0=39, lat1=49) +
#coord_map("albers", lat0=39, lat1=49) +
gg <- gg +
# The geom points are plotted scaled 0 to 1.  The factor can be adjusted
geom_point(data=df_map, aes(x=origin_lon, y=origin_lat),
#col=point_color,
shape = 21, colour = "black", fill = point_color,
size=(df_map$airpot_counts_scaled)*4) +
geom_curve(data = df_map,
aes(x=origin_lon, y=origin_lat, xend=dest_lon, yend=dest_lat),
# color is selected by index from the predefined color pallete above
# needs to be rounded to an int between 1 and 10
col = line_color,
alpha=alpha,
curvature = 0.3, angle = 90, ncp = 5)
gg
}
plot_network_unweighted(df_map=all_flights_2018, map_title='Unweighted Network, 2018', point_color='red', alpha = .01,)
plot_network_unweighted(df_map=all_flights_2018, map_title='Unweighted Network, 2018', point_color='red', alpha = .01,)
plot_network_unweighted(df_map=all_2018_rand_Df , map_title="Null Model, 2018", point_color='green')
plot_network_unweighted(df_map=all_2018_rand_Df , map_title="Null Model, 2018", point_color='green')
# Experimentation with random weights for the weighted graph
#wn_2018_rand_df$flights <- sample(1:5,nrow(wn_2018_rand_df),replace=TRUE)
#WN_2018$flights <- sample(1:5,nrow(WN_2018),replace=TRUE)
# use plot network function from "Data_Pipeline_with_maps"
plot_network_unweighted(df_map=all_1998_rand_Df , map_title="Null Model, 1998", point_color='green')
plot_network_unweighted(df_map=all_flights_1998, map_title='Unweighted Network, 1998', point_color='red')
plot_network_unweighted(df_map=all_2018_rand_Df , map_title="Null Model, 2018", point_color='green')
View(all_2018_rand_Df)
View(all_2018_weighted_metrics)
View(all_2018_metrics)
View(all_1998_rand_Df)
View(all_2018_metrics)
hist(all_2018_metrics$observed_deg, main="Degree Distribution of 2018 Network", col='red',
xlab="Node Degree")
hist(all_2018_metrics$rand_deg, main="Degree Distribuion of 2018 Null Model", col='green',
xlab="Node Degree")
hist(all_1998_metrics$observed_deg, main="Degree Distribution of 1998 Network", col='red',
xlab="Node Degree")
hist(all_1998_metrics$rand_deg, main="Degree Distribuion of 1998 Null Model", col='green',
xlab="Node Degree")
View(all_1998_summary)
all_1998_weighted_metrics <- get_weighted_metrics(all_flights_1998)
all_1998_weighted_summary <- data.frame(colMeans(all_1998_weighted_metrics))
all_2018_weighted_metrics <- get_weighted_metrics(all_flights_2018)
all_2018_weighted_summary <- data.frame(colMeans(all_2018_weighted_metrics))
View(all_1998_weighted_metrics)
save.image("~/Documents/projects/network_science_flights/env_for_metrics_maus_apr_14.RData")
